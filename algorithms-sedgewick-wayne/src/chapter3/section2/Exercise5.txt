3.2.5

Neither inserting the keys in increasing or decreasing order of likely frequency of access will be the optimal approach.
This problem is known as creating an optimal-binary search tree (Optimal BST).
Since the insertions occur before the searches, we are looking for the best way to create a statically optimal BST.

Two algorithms could be used to achieve this:
1- Knuth's dynamic programming algorithm
It constructs the statically optimal tree in O(N^2) time using a dynamic programming algorithm.
This algorithm is based on the observation that the static optimality problem exhibits optimal substructure; that is, if a certain tree is statically optimal for a given probability distribution, then its left and right subtrees must also be statically optimal for their appropriate subsets of the distribution.

2- Mehlhorn's approximation algorithm
This algorithm closely approximates the statically optimal tree in O(N) time.
In this algorithm, the root of the tree is chosen so as to most closely balance the total weight (by probability) of the left and right subtrees.
This strategy is then applied recursively on each subtree.

Reference: https://en.wikipedia.org/wiki/Optimal_binary_search_tree

Thanks to dragon-dreamer (https://github.com/dragon-dreamer) for finding the correct solution for this exercise.
https://github.com/reneargento/algorithms-sedgewick-wayne/issues/121