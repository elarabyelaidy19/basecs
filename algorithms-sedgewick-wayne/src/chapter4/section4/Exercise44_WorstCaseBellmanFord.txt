4.4.44 - Worst case (Bellman-Ford)

Description of the graph family:

A complete graph with:
Vertex set V = {1, ..., n}, where the first vertex is the source.
Edge set E = U(from i=1 to n) Ei, where Ei is the set of edges going out of vertex i, Ei = {(i, j) | i != j}.

S is the shortest-path from the source vertex that passes through every vertex in the graph.
S = U(from k=1 to n) Sk, where Sk is the vertex in the kth position of the shortest path.

The edge weights are assigned following the order of the vertices in S.
For each vertex in the kth position in S:

The weight of the edge from vertex i to vertex j is defined as:

if vertex j is the S(k+1)st vertex in S: w((i, j)) = 0
else: w((i, j)) = n - k

The edges are connected in an order that in each iteration of Bellman-Ford's algorithm, the last vertex enqueued is the next vertex in the shortest-path S. So when checking adjacent vertices for the Skth vertex, the S(k+1)st vertex will be the last vertex checked; when checking adjacent vertices for the S(k+1)st vertex, the S(k+2)nd vertex will be the last vertex checked and so on. The following example illustrates this architecture.

Example of a graph from this family for n = 4:
The shortest-path S in the graph is 1 -> 4 -> 2 -> 3

    ____0____
   /         \
  /___3___    \
 /        v    v
1 -> 2 -> 3 <- 4
^ 3   ^0     2 /
 \     \______/
  \       0  /
   \___2____/
           
The following edges are also present in the graph, but were not drawn to keep the drawing simple.
They do not lead to relaxation of edges, but are still checked in the relax() method.
2->1 weight: 1
2->4 weight: 1
3->1 weight: 0
3->2 weight: 0
3->4 weight: 0

The n - 1 edges adjacent to the source are examined first by the Bellman-Ford algorithm.
Since their destination vertices {2, ..., n} are not yet in the queue all these vertices are enqueued with their initial tentative distances (either 0 or n - 1 = 3, since k = 1).
In the next iteration, once the first vertex in dequeued, its n - 1 adjacent edges are checked for possible relaxations. No edges will be relaxed until the last vertex lv is dequeued. This last vertex lv is the vertex Sk in the shortest-path S, and checking its adjacent edges will cause n - k vertices (all the vertices with k > lvk, or in other words, vertices that come after lv in S) to be enqueued. This means that at first n - 1 vertices will be enqueued, then n - 2, and so on, until no vertices are enqueued. It leads to a number of enqueuements equal to n - 1 + n - 2 + ... + 1 + 0 = (n - 1) * n / 2 = (n^2 - n) / 2 = O(E), since this is a complete graph with (n^2 - n) edges.
For each vertex enqueued, there are V - 1 edge weight evaluations in the relax() method.
Also, for every V calls to relax() there is a check to find negative cycles with O(V) runtime complexity.
In total, this leads to the worst-case of Bellman-Ford's algorithm: O(E * V).

The presented family of graphs is very dense: m = n(n - 1).
To construct sparser graphs we can remove edges from the set E(Sn) and when it is empty we continue to remove edges from the set E(Sn-1), then E(Sn-2) and so fort, until we achieve the desired m. This order of removal keeps the required runtime complexity equal to O(E * V). This way we obtain graphs with variable density: n <= m < n(n - 1).