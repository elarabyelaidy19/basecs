4.4.55 - Prediction

Doubling ratio experiments:

Vertices |  Edges |  Time |   Ratio
     250     2500     0.0       2.2
     500     5000     0.1       3.5
    1000    10000     0.3       4.7
    2000    20000     1.5       4.4
    4000    40000     6.6       4.4

Through the doubling ratio experiments it is possible to see that the ratios approach a limit 2^b = 4.4.
So the average time spent to compute all the shortest paths in a graph with 8000 vertices and 80000 edges would be 6.6 * 4.4 = 29.04 seconds. This is way above our target 10 seconds.
But we can conclude from these experiments that the number of vertices required is between 4000 and 8000.

Running doubling ratio experiments again, but with different vertice numbers:

Vertices |  Edges |  Time |   Ratio
     300     3000     0.0       2.3
     600     6000     0.1       3.9
    1200    12000     0.4       3.9
    2400    24000     1.9       4.3

The average time spent to compute all the shortest paths in a graph with 4800 vertices and 48000 edges would be 1.9 * 4.4 = 8.36 seconds, which is very close to our target 10 seconds.

So the estimate of the graph size for which to compute all the shortest paths in 10 seconds is a size slightly above 4800: 5200 vertices and 52000 edges.

We can check if the estimate is accurate running empirical experiments:

Empirical experiments:

 Vertices |  Edges |  Average time spent
     1000    10000                  0.31
     2000    20000                  1.25
     3000    30000                  3.05
     4000    40000                  5.82
     5000    50000                 10.03

(Approximately) largest graph that could be handled using Dijkstra's algorithm to compute all its shortest paths in 10 seconds: 
Vertices: 5000
Edges: 50000

The estimate was close to the actual graph size. This concludes that with doubling ratio experiments it is possible to make accurate predictions, even for input of large size.