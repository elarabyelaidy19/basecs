4.3.46 - Johnson's algorithm

Running 10 experiments with 1000000 vertices and 3000000 edges for random edge weighted graphs with uniform weight distribution and random edge weighted graphs with gaussian weight distribution. 
Running 10 experiments with 1000 vertices and 499500 edges (all vertices are connected to each other) for random edge weighted Euclidean graphs.

                    Edge Weighted Graph type |    MST Algorithm |   Vertices |    Edges |    D-way heap |  Average time spent
 Random graph w/ uniform weight distribution      Lazy Prim MST      1000000    3000000      2-Way Heap                  4.29
 Random graph w/ uniform weight distribution      Lazy Prim MST      1000000    3000000      3-Way Heap                  3.30
 Random graph w/ uniform weight distribution      Lazy Prim MST      1000000    3000000      4-Way Heap                  3.16
 Random graph w/ uniform weight distribution      Lazy Prim MST      1000000    3000000      5-Way Heap                  3.19
 Random graph w/ uniform weight distribution        Kruskal MST      1000000    3000000      2-Way Heap                  5.44
 Random graph w/ uniform weight distribution        Kruskal MST      1000000    3000000      3-Way Heap                  4.49
 Random graph w/ uniform weight distribution        Kruskal MST      1000000    3000000      4-Way Heap                  4.24
 Random graph w/ uniform weight distribution        Kruskal MST      1000000    3000000      5-Way Heap                  4.00
Random graph w/ gaussian weight distribution      Lazy Prim MST      1000000    3000000      2-Way Heap                  4.00
Random graph w/ gaussian weight distribution      Lazy Prim MST      1000000    3000000      3-Way Heap                  3.27
Random graph w/ gaussian weight distribution      Lazy Prim MST      1000000    3000000      4-Way Heap                  3.12
Random graph w/ gaussian weight distribution      Lazy Prim MST      1000000    3000000      5-Way Heap                  3.36
Random graph w/ gaussian weight distribution        Kruskal MST      1000000    3000000      2-Way Heap                  4.81
Random graph w/ gaussian weight distribution        Kruskal MST      1000000    3000000      3-Way Heap                  4.20
Random graph w/ gaussian weight distribution        Kruskal MST      1000000    3000000      4-Way Heap                  3.93
Random graph w/ gaussian weight distribution        Kruskal MST      1000000    3000000      5-Way Heap                  3.60
                      Random Euclidean graph      Lazy Prim MST         1000     499500      2-Way Heap                  0.40
                      Random Euclidean graph      Lazy Prim MST         1000     499500      3-Way Heap                  0.34
                      Random Euclidean graph      Lazy Prim MST         1000     499500      4-Way Heap                  0.33
                      Random Euclidean graph      Lazy Prim MST         1000     499500      5-Way Heap                  0.32
                      Random Euclidean graph        Kruskal MST         1000     499500      2-Way Heap                  0.06
                      Random Euclidean graph        Kruskal MST         1000     499500      3-Way Heap                  0.07
                      Random Euclidean graph        Kruskal MST         1000     499500      4-Way Heap                  0.06
                      Random Euclidean graph        Kruskal MST         1000     499500      5-Way Heap                  0.04

The experiment results show that for random edge weighted graphs with uniform and gaussian weight distribution the best value of d for d-way heaps is 4 when using the lazy version of Prim's algorithm and 5 when using Kruskal's algorithm.
For random edge weighted Euclidean graphs, for both the lazy version of Prim's algorithm and Kruskal's algorithm, the best value of d for d-way heaps is 5.
These results are probably related to the fact that, even though higher d values for d-way heaps require more nodes to be checked in sink() operations (since there are more children per node), less nodes are checked in swim() operations because there are fewer levels in the tree.