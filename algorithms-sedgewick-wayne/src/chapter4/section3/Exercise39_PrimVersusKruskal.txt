4.3.39 - Prim versus Kruskal

Running 10 experiments with 100000 vertices and 300000 edges for random edge weighted graphs with uniform weight distribution and random edge weighted graphs with gaussian weight distribution. 
Running 10 experiments with 1000 vertices and 499500 edges (all vertices are connected to each other) for random edge weighted Euclidean graphs.

                    Edge Weighted Graph type |    MST Algorithm |   Vertices |    Edges |  Average time spent
 Random graph w/ uniform weight distribution      Lazy Prim MST       100000     300000                  0.21
 Random graph w/ uniform weight distribution     Eager Prim MST       100000     300000                  0.14
 Random graph w/ uniform weight distribution        Kruskal MST       100000     300000                  0.24
Random graph w/ gaussian weight distribution      Lazy Prim MST       100000     300000                  0.20
Random graph w/ gaussian weight distribution     Eager Prim MST       100000     300000                  0.14
Random graph w/ gaussian weight distribution        Kruskal MST       100000     300000                  0.23
                      Random Euclidean graph      Lazy Prim MST         1000     499500                  0.33
                      Random Euclidean graph     Eager Prim MST         1000     499500                  0.05
                      Random Euclidean graph        Kruskal MST         1000     499500                  0.06

The experiment results show that for random edge weighted graphs with uniform and gaussian weight distribution the eager version of Prim's algorithm is faster than the lazy version of Prim's algorithm and than Kruskal's algorithm to compute the minimum spanning tree. Also, for such graphs, the lazy version of Prim's algorithm is faster than Kruskal's algorithm. For random edge weighted Euclidean graphs, the eager version of Prim's algorithm and Kruskal's algorithm had the best results, with both computing the minimum spanning tree around 85% time faster than the lazy version of Prim's algorithm. For edge weighted Euclidean graphs the eager version of Prim's algorithm was slightly faster than Kruskal's algorithm.
As seen on exercise 4.3.38, the eager version of Prim's algorithm maintains a priority queue of size at most equal to the number of vertices in the graph whereas the lazy version of Prim's algorithm maintains a priority queue of size at most equal to the number of edges in the graph. This explains the best results of the eager version of the algorithm in all experiments, especially with the random edge weighted Euclidean graphs, where there are much less vertices than edges (1000 vertices versus 499500 edges).
Kruskal's algorithm has an extra overhead of doing a connected() operation for each edge in addition to the priority-queue operations that Prim's algorithms do for each edge processed and of updating its union-find data structure. This may explain its worse results for random edge weighted graphs with uniform and gaussian weight distributions, where the number of vertices and edges are similar (100000 vertices and 300000 edges). It also seems that this overhead does not affect the performance too much when there are much less vertices than edges, as seen on the results of the experiments with the random edge weighted Euclidean graphs (which, as mentioned above, has 1000 vertices versus 499500 edges). This may happen because the union-find has at most V (the number of vertices in the graph) components, and when there are not many vertices the overhead may be smaller.