4.3.40 - Reduced overhead

Running 10 experiments with 2500 vertices and 5000 edges for random edge weighted graphs with uniform weight distribution (both space-efficient and non-space-efficient versions) and random edge weighted graphs with gaussian weight distribution (both space-efficient and non-space-efficient versions). 
Running 10 experiments with 250 vertices and 31125 edges (all vertices are connected to each other) for random edge weighted Euclidean graphs (both space-efficient and non-space-efficient versions).

                                    Edge Weighted Graph type |    MST Algorithm |   Vertices |    Edges |  Average time spent
                 Random graph w/ uniform weight distribution      Lazy Prim MST         2500       5000                  0.00
 Random space-efficient graph w/ uniform weight distribution      Lazy Prim MST         2500       5000                 33.49
                 Random graph w/ uniform weight distribution     Eager Prim MST         2500       5000                  0.00
 Random space-efficient graph w/ uniform weight distribution     Eager Prim MST         2500       5000                  0.02
                 Random graph w/ uniform weight distribution        Kruskal MST         2500       5000                  0.00
 Random space-efficient graph w/ uniform weight distribution        Kruskal MST         2500       5000                  0.01
                Random graph w/ gaussian weight distribution      Lazy Prim MST         2500       5000                  0.00
Random space-efficient graph w/ gaussian weight distribution      Lazy Prim MST         2500       5000                 14.22
                Random graph w/ gaussian weight distribution     Eager Prim MST         2500       5000                  0.00
Random space-efficient graph w/ gaussian weight distribution     Eager Prim MST         2500       5000                  0.01
                Random graph w/ gaussian weight distribution        Kruskal MST         2500       5000                  0.00
Random space-efficient graph w/ gaussian weight distribution        Kruskal MST         2500       5000                  0.01
                                      Random Euclidean graph      Lazy Prim MST          250      31125                  0.01
                      Random space-efficient Euclidean graph      Lazy Prim MST          250      31125                  2.35
                                      Random Euclidean graph     Eager Prim MST          250      31125                  0.00
                      Random space-efficient Euclidean graph     Eager Prim MST          250      31125                  0.00
                                      Random Euclidean graph        Kruskal MST          250      31125                  0.00
                      Random space-efficient Euclidean graph        Kruskal MST          250      31125                  0.00

The experiment results show that for all graph types and minimum-spanning-tree algorithms computing the minimum-spanning-tree of the default implementation (non-space-efficient) of edge weighted graphs is either faster than or takes the same time as computing the minimum-spanning-tree of the space-efficient implementation of edge weighted graphs.
This is expected because for space-efficient edge weighted graphs there is a trade-off between memory usage and time. The implementation uses less space than default edge weighted graphs (as seen on exercise 4.3.28) but the order of growth of the minimum-spanning-tree algorithms to compute their minimum-spanning-tree is higher than the order of growth to compute the minimum-spanning-tree of non-space-efficient (default) implementations of edge weighted graphs.
To compute the minimum-spanning-tree of space-efficient edge weighted graphs the lazy version of Prim's algorithm has complexity O(E * V^2) (against O(E lg E for non-space-efficient edge weighted graphs), the eager version of Prim's algorithm has complexity O(V^2) (against O(E lg V for non-space-efficient edge weighted graphs) and Kruskal's algorithm has complexity O(V^2) (against O(E lg E for non-space-efficient edge weighted graphs).
In the cases where the average time spent was the same for both space-efficient and non-space-efficient graph models it is possible that this happened because the graph had a small size (250 vertices and 31125 edges in the case of Euclidean graphs), and both the eager version of Prim's algorithm and Kruskal's algorithm were able to compute the minimum-spanning-tree instantly (unlike the lazy version of Prim's algorithm). So the higher time complexity to compute the minimum-spanning-tree of space-efficient edge weighted graphs does not seem to be a problem if the graph does not have many vertices when using either the eager version of Prim's algorithm or Kruskal's algorithm.
Therefore, when the goal is to optimize memory usage and time complexity is not a concern, space-efficient edge weighted graphs should be used. Otherwise, the default implementation of edge weighted graphs that uses Bags of Edges should be used.