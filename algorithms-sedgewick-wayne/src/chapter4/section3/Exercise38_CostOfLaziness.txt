4.3.38 - Cost of laziness

Running 10 experiments with 100000 vertices and 300000 edges for random edge weighted graphs with uniform weight distribution and random edge weighted graphs with gaussian weight distribution. 
Running 10 experiments with 1000 vertices and 499500 edges (all vertices are connected to each other) for random edge weighted Euclidean graphs.

                    Edge Weighted Graph type |    MST Algorithm |   Vertices |    Edges |  Average time spent
 Random graph w/ uniform weight distribution      Lazy Prim MST       100000     300000                  0.20
 Random graph w/ uniform weight distribution     Eager Prim MST       100000     300000                  0.14
Random graph w/ gaussian weight distribution      Lazy Prim MST       100000     300000                  0.20
Random graph w/ gaussian weight distribution     Eager Prim MST       100000     300000                  0.14
                      Random Euclidean graph      Lazy Prim MST         1000     499500                  0.33
                      Random Euclidean graph     Eager Prim MST         1000     499500                  0.05

The experiment results show that the eager version of Prim's algorithm is faster than the lazy version. For all graph models tested the eager version spent less time on average (around 25% less time than the lazy version for random edge weighted graphs with uniform and gaussian weight distribution and 87.5% less time for random edge weighted Euclidean graphs) to compute the minimum spanning tree.
The experiment results also show that the higher the number of edges in the graph, the higher the gains when using the eager version of Prim's algorithm. This makes sense, since the eager version maintains a priority queue of size at most equal to the number of vertices in the graph, whereas the lazy version maintains a priority queue of size at most equal to the number of edges in the graph.