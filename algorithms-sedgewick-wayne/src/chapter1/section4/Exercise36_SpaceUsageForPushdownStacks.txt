1.4.36 - Space usage for pushdown stacks

* Linked list
   int (~32N bytes) - the stack node uses 32 bytes (16 for overhead, 8 for a reference to a Node object (next), 4 for the int item and 4 for padding). There are N items, so 32N. Also, the Stack uses 32 bytes (16 for object overhead, 8 for a reference to a Node instance variable (first), 4 for an int instance variable (size) and 4 for padding). In total, ~32N bytes.
   Integer (~56N bytes) - the stack node uses 32 bytes (16 for overhead, 8 for a reference to a Node object (next) and 8 for a reference to an Integer object (item)). Each Integer object uses 24 bytes. In total, there are 56 bytes per item. There are N items, so 56N. Also, the Stack uses 32 bytes (16 for object overhead, 8 for a reference to a Node instance variable (first), 4 for an int instance variable (size) and 4 for padding). In total, ~56N bytes.

* Resizing array
   int (between ~4N and ~16N bytes) - each int uses 4 bytes. There are N int values, so 4N. The array also uses 24 bytes of header information (16 bytes of object overhead, 4 bytes for the length and 4 bytes of padding). The Stack uses 16 bytes for object overhead, 8 bytes for a reference to the array, 4 bytes for its int instance variable (size) and 4 bytes for padding. In total, ~4N. Due to resizing, the array can be 25% to 100% full, meaning the total memory usage is between ~4N and ~16N.
   Integer (between ~32N and ~56N bytes) - each Integer uses 24 bytes. There are N Integer objects, so 24N. The array overhead uses 24 bytes (16 bytes of object overhead, 4 bytes for the length and 4 bytes of padding) plus 8N bytes for references to the Integer objects. The Stack uses 16 bytes for object overhead, 8 bytes for a reference to the array, 4 bytes for its int instance variable (size) and 4 bytes for padding. In total, ~32N. Due to resizing, the array can be 25% to 100% full, meaning the total memory usage is between ~32N and ~56N (with 8N references to the Integer objects up to 32N references).